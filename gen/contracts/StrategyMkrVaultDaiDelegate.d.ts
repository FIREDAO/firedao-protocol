/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StrategyMkrVaultDaiDelegateContract
  extends Truffle.Contract<StrategyMkrVaultDaiDelegateInstance> {
  "new"(
    _controller: string,
    meta?: Truffle.TransactionDetails
  ): Promise<StrategyMkrVaultDaiDelegateInstance>;
}

type AllEvents = never;

export interface StrategyMkrVaultDaiDelegateInstance
  extends Truffle.ContractInstance {
  balanceOf(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfWant(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfmVault(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  c(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  c_base(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  c_safe(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  cdpId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  cdp_manager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  dai(txDetails?: Truffle.TransactionDetails): Promise<string>;

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  draw: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  drawAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  eth_price_oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  forceRebalance: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getName(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getTotalDebtAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getUnderlyingDai(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getmVaultRatio(
    amount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  harvest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  harvester(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ilk(txDetails?: Truffle.TransactionDetails): Promise<string>;

  jug(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mcd_join_dai(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mcd_join_eth_a(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mcd_spot(txDetails?: Truffle.TransactionDetails): Promise<string>;

  performanceFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  performanceMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  repay: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  repayAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  setBorrowCollateralizationRatio: {
    (_c: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _c: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _c: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _c: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setController: {
    (_controller: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setGovernance: {
    (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setHarvester: {
    (_harvester: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _harvester: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _harvester: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _harvester: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMCDValue: {
    (
      _manager: string,
      _ethAdapter: string,
      _daiAdapter: string,
      _spot: string,
      _jug: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _manager: string,
      _ethAdapter: string,
      _daiAdapter: string,
      _spot: string,
      _jug: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _manager: string,
      _ethAdapter: string,
      _daiAdapter: string,
      _spot: string,
      _jug: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _manager: string,
      _ethAdapter: string,
      _daiAdapter: string,
      _spot: string,
      _jug: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setOracle: {
    (_oracle: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPerformanceFee: {
    (
      _performanceFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _performanceFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _performanceFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _performanceFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStrategist: {
    (_strategist: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _strategist: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _strategist: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _strategist: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStrategistReward: {
    (
      _strategistReward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _strategistReward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _strategistReward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _strategistReward: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setWithdrawCollateralizationRatio: {
    (
      _c_safe: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _c_safe: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _c_safe: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _c_safe: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setWithdrawalFee: {
    (
      _withdrawalFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _withdrawalFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _withdrawalFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _withdrawalFee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  shouldDraw(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  shouldRepay(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  strategist(txDetails?: Truffle.TransactionDetails): Promise<string>;

  strategistReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  strategistRewardMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  unirouter(txDetails?: Truffle.TransactionDetails): Promise<string>;

  vat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  want(txDetails?: Truffle.TransactionDetails): Promise<string>;

  weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdrawAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  withdrawalFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  withdrawalMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  yVaultDAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    balanceOf(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfWant(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfmVault(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    c(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    c_base(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    c_safe(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    cdpId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    cdp_manager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    dai(txDetails?: Truffle.TransactionDetails): Promise<string>;

    deposit: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    draw: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    drawAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    eth_price_oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    forceRebalance: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getName(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getTotalDebtAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getUnderlyingDai(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getmVaultRatio(
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    harvest: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    harvester(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ilk(txDetails?: Truffle.TransactionDetails): Promise<string>;

    jug(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mcd_join_dai(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mcd_join_eth_a(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mcd_spot(txDetails?: Truffle.TransactionDetails): Promise<string>;

    performanceFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    performanceMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    repay: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    repayAmount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    setBorrowCollateralizationRatio: {
      (
        _c: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _c: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _c: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _c: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setController: {
      (_controller: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setGovernance: {
      (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setHarvester: {
      (_harvester: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _harvester: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _harvester: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _harvester: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMCDValue: {
      (
        _manager: string,
        _ethAdapter: string,
        _daiAdapter: string,
        _spot: string,
        _jug: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _manager: string,
        _ethAdapter: string,
        _daiAdapter: string,
        _spot: string,
        _jug: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _manager: string,
        _ethAdapter: string,
        _daiAdapter: string,
        _spot: string,
        _jug: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _manager: string,
        _ethAdapter: string,
        _daiAdapter: string,
        _spot: string,
        _jug: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setOracle: {
      (_oracle: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPerformanceFee: {
      (
        _performanceFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _performanceFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _performanceFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _performanceFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setStrategist: {
      (_strategist: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _strategist: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _strategist: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _strategist: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setStrategistReward: {
      (
        _strategistReward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _strategistReward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _strategistReward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _strategistReward: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setWithdrawCollateralizationRatio: {
      (
        _c_safe: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _c_safe: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _c_safe: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _c_safe: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setWithdrawalFee: {
      (
        _withdrawalFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _withdrawalFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _withdrawalFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _withdrawalFee: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    shouldDraw(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    shouldRepay(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    strategist(txDetails?: Truffle.TransactionDetails): Promise<string>;

    strategistReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    strategistRewardMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    unirouter(txDetails?: Truffle.TransactionDetails): Promise<string>;

    vat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    want(txDetails?: Truffle.TransactionDetails): Promise<string>;

    weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

    withdrawAll: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    withdrawalFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    withdrawalMax(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    yVaultDAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

    "withdraw(uint256)": {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdraw(address)": {
      (_asset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_asset: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
