/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface StrategyTusdCurveContract
  extends Truffle.Contract<StrategyTusdCurveInstance> {
  "new"(
    _controller: string,
    _yycrv: string,
    meta?: Truffle.TransactionDetails
  ): Promise<StrategyTusdCurveInstance>;
}

type AllEvents = never;

export interface StrategyTusdCurveInstance extends Truffle.ContractInstance {
  balanceOf(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfWant(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfYCRV(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfYCRVyTUSD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfYYCRV(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfYYCRVinYCRV(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOfYYCRVinyTUSD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

  dai(txDetails?: Truffle.TransactionDetails): Promise<string>;

  deposit: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getName(txDetails?: Truffle.TransactionDetails): Promise<string>;

  governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setController: {
    (_controller: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _controller: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setGovernance: {
    (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _governance: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  tusd(txDetails?: Truffle.TransactionDetails): Promise<string>;

  usdc(txDetails?: Truffle.TransactionDetails): Promise<string>;

  usdt(txDetails?: Truffle.TransactionDetails): Promise<string>;

  want(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdrawAll: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  y(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ycrv(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ydai(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ytusd(txDetails?: Truffle.TransactionDetails): Promise<string>;

  yusdc(txDetails?: Truffle.TransactionDetails): Promise<string>;

  yusdt(txDetails?: Truffle.TransactionDetails): Promise<string>;

  yycrv(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    balanceOf(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfWant(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfYCRV(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfYCRVyTUSD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfYYCRV(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfYYCRVinYCRV(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOfYYCRVinyTUSD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    controller(txDetails?: Truffle.TransactionDetails): Promise<string>;

    curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

    dai(txDetails?: Truffle.TransactionDetails): Promise<string>;

    deposit: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    getName(txDetails?: Truffle.TransactionDetails): Promise<string>;

    governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setController: {
      (_controller: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _controller: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setGovernance: {
      (_governance: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _governance: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    tusd(txDetails?: Truffle.TransactionDetails): Promise<string>;

    usdc(txDetails?: Truffle.TransactionDetails): Promise<string>;

    usdt(txDetails?: Truffle.TransactionDetails): Promise<string>;

    want(txDetails?: Truffle.TransactionDetails): Promise<string>;

    withdrawAll: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    y(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ycrv(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ydai(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ytusd(txDetails?: Truffle.TransactionDetails): Promise<string>;

    yusdc(txDetails?: Truffle.TransactionDetails): Promise<string>;

    yusdt(txDetails?: Truffle.TransactionDetails): Promise<string>;

    yycrv(txDetails?: Truffle.TransactionDetails): Promise<string>;

    "withdraw(uint256)": {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdraw(address)": {
      (_asset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_asset: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _asset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
