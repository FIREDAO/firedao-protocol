/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface TimelockContract extends Truffle.Contract<TimelockInstance> {
  "new"(
    admin_: string,
    delay_: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<TimelockInstance>;
}

export interface CancelTransaction {
  name: "CancelTransaction";
  args: {
    txHash: string;
    target: string;
    value: BN;
    signature: string;
    data: string;
    eta: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: string;
    5: BN;
  };
}

export interface ExecuteTransaction {
  name: "ExecuteTransaction";
  args: {
    txHash: string;
    target: string;
    value: BN;
    signature: string;
    data: string;
    eta: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: string;
    5: BN;
  };
}

export interface NewAdmin {
  name: "NewAdmin";
  args: {
    newAdmin: string;
    0: string;
  };
}

export interface NewDelay {
  name: "NewDelay";
  args: {
    newDelay: BN;
    0: BN;
  };
}

export interface NewPendingAdmin {
  name: "NewPendingAdmin";
  args: {
    newPendingAdmin: string;
    0: string;
  };
}

export interface QueueTransaction {
  name: "QueueTransaction";
  args: {
    txHash: string;
    target: string;
    value: BN;
    signature: string;
    data: string;
    eta: BN;
    0: string;
    1: string;
    2: BN;
    3: string;
    4: string;
    5: BN;
  };
}

type AllEvents =
  | CancelTransaction
  | ExecuteTransaction
  | NewAdmin
  | NewDelay
  | NewPendingAdmin
  | QueueTransaction;

export interface TimelockInstance extends Truffle.ContractInstance {
  GRACE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MAXIMUM_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  MINIMUM_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  acceptAdmin: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  cancelTransaction: {
    (
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  delay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  executeTransaction: {
    (
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

  queueTransaction: {
    (
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      target: string,
      value: number | BN | string,
      signature: string,
      data: string,
      eta: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  queuedTransactions(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  setDelay: {
    (
      delay_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      delay_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      delay_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      delay_: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPendingAdmin: {
    (pendingAdmin_: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      pendingAdmin_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      pendingAdmin_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      pendingAdmin_: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    GRACE_PERIOD(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MAXIMUM_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    MINIMUM_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    acceptAdmin: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    admin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    cancelTransaction: {
      (
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    delay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    executeTransaction: {
      (
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    pendingAdmin(txDetails?: Truffle.TransactionDetails): Promise<string>;

    queueTransaction: {
      (
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        target: string,
        value: number | BN | string,
        signature: string,
        data: string,
        eta: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    queuedTransactions(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    setDelay: {
      (
        delay_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        delay_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        delay_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        delay_: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setPendingAdmin: {
      (pendingAdmin_: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        pendingAdmin_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        pendingAdmin_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        pendingAdmin_: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
